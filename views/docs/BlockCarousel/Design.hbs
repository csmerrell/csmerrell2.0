{{!< docsHeader }}
<h1 id="block-carousel-design">Block Carousel Design</h1>
<p>This document will mostly cover some of the more nuanced highlights of this component&#39;s design, with some reasoning why I chose each particular design direction.</p>
<p>View the component&#39;s source code <a href="https://github.com/csmerrell/csmerrell2.0/static/js/components/blockCarousel.js">here (js)</a> and <a href="https://github.com/csmerrell/csmerrell2.0/static/scss/components/blockCarousel.scss">here (css)</a>.</p>
<h2 id="separation-of-responsibilities">Separation of Responsibilities</h2>
<p>I split the full component into 6 different components:</p>
<ul>
<li>BlockCarousel (root component)<ul>
<li>Block [List]<ul>
<li>BlockTitle</li>
<li>BlockContent</li>
<li>BlockActionList<ul>
<li>BlockAction</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>My approach to separating these components followed single responsibility design theory.</p>
<h3 id="block-carousel">Block Carousel</h3>
<p>This is the root component. The only thing it does is manage which block is currently showing. navArrows, navDots, and the actual blocks are housed here.</p>
<p>The bulk of this component&#39;s use boils down to its slide functions:</p>
<pre><code class="language-js">slidePrev: function() {
    //Called when the left arrow is clicked. Grabs the previous block (cycles back at beginning)
    if(!this.actionLocked) {
        //Lock the action flag so the user can&#39;t trigger several slides at once.
        //This could have also been done with promises, among other things, 
        //  but the code wouldn&#39;t be any simpler than this.
        this.actionLocked = true;

        let nextBlockIdx = this.currentBlockIdx - 1;
        if(nextBlockIdx &lt; 0) {
            nextBlockIdx = this.$children.length - 1;
        }

        this.transition(this.currentBlockIdx, nextBlockIdx)
    }
},
slideNext: function() {
    //Called when the right arrow is clicked. Grabs the next block (cycles back at end)
},
slideTo: function(idx) {
    //Called when a navdot is clicked (can skip indices)
},</code></pre>
<p>Nothing too exciting in these functions. The <strong>transition</strong> function has more meat:</p>
<pre><code class="language-js">transition: function(currIdx, nextIdx) {
    //Generic transition function called by all slide functions when they identify origin/destination indices

    if(this.beforeSlide) { //Fire the &quot;before&quot; event hook function if it exists.
        this.beforeSlide(this.$children(nextIdx), nextIdx);
    }

    //Change which navdot is highlighted
    this.blocks[currIdx].isSelected = false;
    this.blocks[nextId].isSelected = false;

    //Ask the current block to fade itself out. It returns a promise that signifies when it&#39;s done.
    let fadeOutPromise = this.$children[currIdx].fadeOut();

    //When the active block is done fading out, start fading in the new block.
    this.$children[nextIdx].fadeIn(fadeOutPromise).then(() =&gt; {
        this.currentBlockIdx = nextIdx;

        if(this.onSlide) { //Fire the &quot;after&quot; event hook function if it exists.
            this.onSlide(this.$children(this.currentBlockIdx), this.currentBlockIdx);
        }

        this.actionLocked = false;        
    });   
}</code></pre>
<p>I think the code &amp; comments here speak for themselves.</p>
<h2 id="block">Block</h2>
<p>Contains 3 core elements (components): <strong>BlockTitle</strong>, <strong>BlockContent</strong>, <strong>BlockActionList</strong></p>
<p>Before talking about those components, though, let me talk about the block&#39;s two main functions:</p>
<h3 id="fade-out--fade-in">Fade Out &amp; Fade In</h3>
<pre><code class="language-js">fadeOut: function() {
    return new Promise((resolve, reject) =&gt; {
        this.$el.addEventListener(&#39;transitionend&#39;, () =&gt; {
            this.fadeOutComplete(resolve);
        });
        this.$el.classList.add(&#39;fade-out&#39;);    
    })
},
fadeOutComplete: function(resolve) {
    this.$el.classList.remove(&#39;fade-out&#39;);
    this.isActive = false;
    resolve();
},
fadeIn: function(prevBlockFadePromise) {
    return new Promise((resolve, reject) =&gt; {
        this.$el.addEventListener(&#39;transitionend&#39;, () =&gt; { 
            this.fadeInComplete(resolve) 
        });

        this.$el.classList.add(&#39;pre-fade-in&#39;);
        prevBlockFadePromise.then(() =&gt; {
            this.$el.classList.add(&#39;fade-in&#39;);
        }, 400)
    })
},
fadeInComplete: function(resolve) {
    this.$el.classList.remove(&#39;pre-fade-in&#39;);
    this.$el.classList.remove(&#39;fade-in&#39;);
    this.isActive = true;
    resolve();
}</code></pre>
<p>The main notes for these functions:</p>
<ol>
<li><p>All behavior is ultimately being done by css3 animations. I use CSS3 to handle all animations where I can, because it&#39;s orders of magnitude better optimized than scripting them, in web. Luckily, the animations for these used very easy, standard css:</p>
<pre><code class="language-scss">.block {
     /* Applied to a visible block to fade it out */
     &amp;.fade-out {
         opacity: 0;
         -webkit-transition: .5s;
         -moz-transition: .5s;
         transition: .5s;
     }

     /* Applied to an incoming block to baseline its opacity to 0 before fading it in. */
     &amp;.pre-fade-in {
         position: absolute;
         opacity: 0;
         display: block !important;
     }

     /* Fades the incoming block in */
     &amp;.fade-in {
         position: relative;
         opacity: 1;
         -webkit-transition: .5s;
         -moz-transition: .5s;
         transition: .5s;
     }
}</code></pre>
</li>
<li><p>CSS transitions are asynchronous. There&#39;s no thread of code to wait on them, so the only reliable way to await them is with a <strong>transitionend</strong> event listener.</p>
<pre><code class="language-js">fadeOut: function() {
     return new Promise((resolve, reject) =&gt; {
         this.$el.addEventListener(&#39;transitionend&#39;, () =&gt; {
             this.fadeOutComplete(resolve);
         });
         this.$el.classList.add(&#39;fade-out&#39;);    
     })
},</code></pre>
</li>
<li><p>The easiest way for the carousel to know that a block is done fading out is to give it a promise and wait for it to resolve:</p>
<pre><code class="language-js">transition: function(currIdx, nextIdx) { //Carousel&#39;s transition event
     ...
     //Ask the current block to fade itself out. It returns a promise that signifies when it&#39;s done.
     let fadeOutPromise = this.$children[currIdx].fadeOut();

     //When the active block is done fading out, start fading in the new block.
     this.$children[nextIdx].fadeIn(fadeOutPromise).then(() =&gt; { ... });
}</code></pre>
</li>
</ol>
<p>That&#39;s it for Blocks. Let&#39;s talk about their children components:</p>
<h2 id="block-title">Block Title</h2>
<p>This is really just a pair of divs and an h1 with styling to position it correctly. </p>
<pre><code class="language-js">export let BlockTitle = Vue.component(&#39;block-title&#39;, {
    template: /* html */`
        &lt;div class=&quot;bc-block-title&quot;&gt;
            &lt;div class=&quot;bc-block-title-wrapper&quot;&gt;
                &lt;h1&gt;
                    &lt;slot&gt;&lt;/slot&gt;
                &lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    `
})</code></pre>
<p>With such a simple structure, this component didn&#39;t <em>really</em> need to be abstracted into a component. I ultimately chose to abstract it for a few boring reasons:</p>
<ol>
<li>The template has two nested divs, and the component simplifies them to a single element in the core markup file.</li>
<li>Other parts of the block were already abstracted, so I wanted to stay consistent.</li>
<li>Abstracting the 3 components made it much easier for a human to read and separate the distinct elements of the block in the markup.</li>
</ol>
<p>This class doesn&#39;t &quot;do&quot; anything, though, so I can see arguments against choosing to abstract it.</p>
<h2 id="block-content">Block Content</h2>
<p>Like the Block Title, this component is just divs and styling:</p>
<pre><code class="language-js">export let BlockContent = Vue.component(&#39;block-content&#39;, {
    template: /* html */`
        &lt;div class=&quot;bc-block-content pure-g  fade-container&quot;&gt;
            &lt;div class=&quot;pure-u-xs-1-24 pure-u-md-1-12 pure-u-lg-1-8 pure-u-xl-1-4&quot;&gt;&lt;/div&gt;
            &lt;div class=&quot;code-slot pure-u-1 pure-u-xs-11-12 pure-u-md-5-6 pure-u-lf-3-4 pure-u-xl-1-2&quot;&gt;
                &lt;slot&gt;
                &lt;/slot&gt;
            &lt;/div&gt;
            &lt;div class=&quot;pure-u-sm-1-24 pure-u-md-1-12 pure-u-lg-1-8 pure-u-xl-1-4&quot;&gt;&lt;/div&gt;
            &lt;div class=&quot;fade-out-bottom&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
    `
})</code></pre>
<p>This one had a lot more divs, so I feel much better about abstracting it and keeping the up front markup clean.</p>
<p>DRAWBACKS:
This component exposes the biggest weakness of this component &gt;&gt; An implicit (and improperly documented) dependency on the <a href="https://purecss.io/">PureCss</a> responsive grids library. I accepted this for the purposes of this application because it made it easy for the carousel to have the <em>exact</em> same sizing as the parent page.</p>
<p>Were I to make this component <em>durable</em> and <em>portable</em>, this would be one of the first things to refactor. I would remove the dependency, so the tool can be used in contexts where PureCss is not present.</p>
<p>Additional revisions to consider:</p>
<ul>
<li>Allow developers to configure the carousel &amp; its content to a variety of display setups (i.e. <code>position: absolute|fixed|relative</code> or <code>display: block|inline|inline-block</code>).<ul>
<li>Drawbacks: This is a non-trivial revision when considering the variety of contexts the component could be used in.</li>
</ul>
</li>
<li>Let developers simply position the carousel themselves.<ul>
<li>Drawbacks: This makes my current &#39;ultra-wide with deep side margins&#39; display relatively problematic for anyone else to achieve, as they would have to open up the component&#39;s css and start overriding classes to keep the arrows wide while the code blocks remain compact.</li>
<li>(My Recommendation) If the component needed to be portable I&#39;d go this route, even though it sacrifices some value. I know the tool well enough to override my own css and document for my own contexts and needs.</li>
</ul>
</li>
<li>Implement some deeper class configurables to enable more options<ul>
<li>Drawbacks: This gets bloated fast. I don&#39;t recommend it.</li>
</ul>
</li>
</ul>
<h2 id="block-action-list">Block Action List</h2>
<pre><code class="language-js">export let BlockActionList = Vue.component(&#39;block-action-list&#39;, {
    template: /* html */`
        &lt;div class=&quot;bc-block-action-list&quot;&gt;
            &lt;div class=&quot;pure-u-1 bc-list-center&quot;&gt;
                &lt;slot&gt;&lt;/slot&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    `
})</code></pre>
<p>Another ultra simple component. Even though it&#39;s only two divs, I feel good about choosing to abstract this one because abstracting it makes it more implicit that the list can handle several <strong>BlockAction</strong> components, and position them correctly at various screen sizes.</p>
<pre><code class="language-css">.bc-block-action-container {
    position: absolute;
    bottom: 3rem;
    width: 100%;
    text-align: center;
    z-index: 10;

    .bc-block-action {
        font-size: $font-size-med;
        box-shadow: 0 0 1rem var(--clr-bg-alt);

        a {
            color: var(--clr-fonts-base);
            text-decoration: none;

            &amp;:hover {
                color: var(--clr-fonts-base);
            }
        }
    }
}</code></pre>
<p>The css is not even complex. But it works, and abstracting the List into a component serves as a sort of guarantee that it works.</p>
<p>(It won&#39;t look good with tons of actions, but anything more than 3 actions is excessive, anyway).</p>
<h2 id="block-action">Block Action</h2>
<p>The last component, and the one that actually needs some refactoring to be worth its weight. I moved this to another document, as its design problems deserve a space of their own: <a href="/docs/BlockCarousel/actionDesignRevisions">Block Action Design Issues</a></p>
<h2 id="sasscss">Sass/CSS</h2>
<p>Consider checking the full Sass of my component, as I haven&#39;t given it due attention in these documents: <a href="https://github.com/csmerrell/csmerrell2.0/static/scss/components/blockCarousel.scss">Source SCSS</a></p>
